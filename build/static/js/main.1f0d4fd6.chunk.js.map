{"version":3,"sources":["constants.ts","store/contacts.ts","store/BackgroundTasks.ts","store/index.ts","store/contactsSelector.ts","Contacts/TextBox.tsx","Contacts/ContactFieldValidators.ts","Contacts/ContactItem.tsx","Contacts/ContactsList.tsx","Contacts/ContactsLayout.tsx","serviceWorker.ts","index.tsx","ConfigureStore.ts"],"names":["ContactsKeys","CreateUpdateContact","DeleteContact","initalContactsState","contacts","showFavorites","isLoading","sagaActions","watchCreateUpdateContact","takeEvery","watchDeleteContact","action","call","localStorage","setItem","contactId","JSON","stringify","contact","select","state","Object","keys","put","type","error","removeItem","filter","f","loadContacts","getItem","keysString","parse","Array","isArray","key","contactString","rootSaga","reducers","newContactId","uuid","newContact","name","email","isFavorite","isNewContact","undefined","all","Contacts","map","getContacts","getFavoritesSwitch","useStyles","makeStyles","theme","root","border","display","flexDirection","verticalAlign","span","color","padding","fontSize","fontFamily","fontWeight","lineHeight","letterSpacing","marginTop","TextBox","label","children","className","rest","classes","InputLabel","shrink","emailRegexp","phoneRegexp","boxShadow","backgroundColor","borderRadius","justifyContent","textField","marginRight","spacing","width","breakpoints","down","marginBottom","fieldsSpace","buttonsSpace","alignItems","ContactItem","phone","isNew","useState","edit","setEdit","stateName","setName","stateEmail","setEmail","statePhone","setPhone","isNameValid","validateName","isEmailValid","search","validateEmail","isPhoneValid","validatePhone","editOnClick","useCallback","p","cancelOnClick","textFiledOnChange","target","id","value","deleteOnClick","toggleFavorites","noValidate","autoComplete","data-cy","TextField","multiline","onChange","IconButton","disabled","edge","aria-label","onClick","contactItem","ContactsList","entries","position","top","left","height","boxSizing","overflow","container","overflowY","toolBar","zIndex","palette","background","default","addButton","alignSelf","bottom","connect","getVisibleContacts","createSelector","reduce","r","contcatId","ToggleShowFavorites","AddContact","StartLoadContacts","containerRef","useRef","addButtonOnClick","current","scrollTo","behavior","ref","FormControlLabel","control","Switch","checked","Fab","Boolean","window","location","hostname","match","store","sagaMiddleware","createSagaMiddleware","mw","applyMiddleware","allReducers","combineReducers","createStore","run","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f0d4fd6.chunk.js","sourcesContent":["// Keys for localStorage\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const ContactsKeys = 'contacts-keys'; // Array of contacts keys\r\n","import { Action, Reducer } from 'redux';\r\nimport uuid from 'uuid/v1';\r\nimport { takeEvery, call, put, select } from 'redux-saga/effects';\r\nimport { ContactsKeys } from '../constants';\r\nimport { ApplicationState } from './index'\r\n\r\nexport interface Contact {\r\n  name: string;\r\n  email: string;\r\n  phone?: string;\r\n  isFavorite: boolean;\r\n}\r\n\r\nexport interface Contacts {\r\n  [id: string]: Contact;\r\n}\r\n\r\nexport interface ContactsState {\r\n  contacts: Contacts;\r\n  newContactId?: string;\r\n  newContact?: Contact;\r\n  showFavorites: boolean;\r\n  isLoading: boolean;\r\n  error?: string;\r\n}\r\n\r\nexport const initalContactsState: ContactsState = {\r\n  contacts: {},\r\n  showFavorites: false,\r\n  isLoading: false,\r\n}\r\n\r\nexport const sagaActions = [\r\n  function* watchCreateUpdateContact() {\r\n    yield takeEvery<CreateUpdateContactAction>('CREATE_UPDATE_CONTACT', CreateUpdateContact)\r\n  },\r\n  function* watchDeleteContact() {\r\n    yield takeEvery<DeleteContactAction>('DELETE_CONTACT', DeleteContact);\r\n  },\r\n]\r\n\r\nexport function* CreateUpdateContact(action: CreateUpdateContactAction) {\r\n  try {\r\n    yield call([localStorage, localStorage.setItem], action.contactId, JSON.stringify(action.contact));\r\n    const keys: string[] = yield select<(state: ApplicationState) => string[]>(state => Object.keys(state.contacts.contacts));\r\n    yield call([localStorage, localStorage.setItem], ContactsKeys, JSON.stringify([action.contactId, ...keys]))\r\n  }\r\n  catch (error) {\r\n    yield put<SetErrorAction>({ type: 'SET_ERROR', error });\r\n  }\r\n}\r\n\r\nexport function* DeleteContact(action: DeleteContactAction) {\r\n  try {\r\n    yield call([localStorage, localStorage.removeItem], action.contactId);\r\n    const keys: string[] = yield select<(state: ApplicationState) => string[]>(state => Object.keys(state.contacts.contacts));\r\n    yield call([localStorage, localStorage.setItem], ContactsKeys, JSON.stringify(keys.filter(f => f !== action.contactId)))\r\n  }\r\n  catch (error) {\r\n    yield put<SetErrorAction>({ type: 'SET_ERROR', error });\r\n  }\r\n}\r\n\r\ninterface ToggleShowFavoritesAction extends Action { type: 'TOGGLE_SHOW_FAVORITES' };\r\n\r\ninterface AddContactAction extends Action { type: 'ADD_CONTACT' };\r\ninterface CreateUpdateContactAction extends Action { type: 'CREATE_UPDATE_CONTACT'; contactId: string; contact: Contact };\r\ninterface DeleteContactAction extends Action { type: 'DELETE_CONTACT'; contactId: string; };\r\ninterface SetErrorAction extends Action { type: 'SET_ERROR'; error: string }\r\n\r\nexport interface StartLoadContactsAction extends Action { type: 'START_LOAD_CONTACTS'; };\r\nexport interface FinishLoadContactsAction extends Action { type: 'FINISH_LOAD_CONTACTS'; contacts: Contacts; error?: string; };\r\n\r\nexport const actionCreators = {\r\n  ToggleShowFavorites: (): ToggleShowFavoritesAction => ({ type: 'TOGGLE_SHOW_FAVORITES' }),\r\n  AddContact: (): AddContactAction => ({ type: 'ADD_CONTACT' }),\r\n  CreateUpdateContact: (contactId: string, contact: Contact): CreateUpdateContactAction => ({ type: 'CREATE_UPDATE_CONTACT', contactId, contact }),\r\n  DeleteContact: (contactId: string): DeleteContactAction => ({ type: 'DELETE_CONTACT', contactId }),\r\n  StartLoadContacts: (): StartLoadContactsAction => ({ type: 'START_LOAD_CONTACTS' }),\r\n}\r\n\r\ntype KnownActions = ToggleShowFavoritesAction |\r\n  AddContactAction | CreateUpdateContactAction |\r\n  DeleteContactAction | SetErrorAction |\r\n  StartLoadContactsAction | FinishLoadContactsAction;\r\n\r\nexport const reducer: Reducer<ContactsState, KnownActions> = (state = initalContactsState, action) => {\r\n  switch (action.type) {\r\n    case 'TOGGLE_SHOW_FAVORITES':\r\n      return { ...state, showFavorites: !state.showFavorites };\r\n    case 'ADD_CONTACT':\r\n      return state.newContactId ? state : {\r\n        ...state,\r\n        newContactId: uuid(),\r\n        // If new contact created when favorites switch is ON, add contact as favorite\r\n        newContact: { name: '', email: '', isFavorite: state.showFavorites, },\r\n      }\r\n    case 'CREATE_UPDATE_CONTACT':\r\n      const isNewContact = state.newContactId === action.contactId;\r\n      return {\r\n        ...state,\r\n        error: undefined,\r\n        newContactId: isNewContact ? undefined : state.newContactId,\r\n        contacts: isNewContact ? {  // New contact add to top\r\n          [action.contactId]: action.contact,\r\n          ...state.contacts,\r\n        } : {\r\n          ...state.contacts,\r\n          [action.contactId]: {\r\n            ...state.contacts[action.contactId],\r\n            ...action.contact\r\n          },\r\n        }\r\n      }\r\n    case 'DELETE_CONTACT':\r\n      {\r\n        const contacts = { ...state.contacts };\r\n        if (contacts[action.contactId]) delete contacts[action.contactId];\r\n        return {\r\n          ...state,\r\n          error: undefined,\r\n          contacts,\r\n          newContactId: action.contactId === state.newContactId ? undefined : state.newContactId,\r\n        }\r\n      }\r\n    case 'START_LOAD_CONTACTS':\r\n      return { ...state, isLoading: true, error: undefined }\r\n    case 'FINISH_LOAD_CONTACTS':\r\n      return action.error ? { ...state, isLoading: false, error: action.error }\r\n        :\r\n        { ...state, isLoading: false, contacts: action.contacts }\r\n    case 'SET_ERROR':\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { call, put } from 'redux-saga/effects';\r\nimport { Contacts, Contact, StartLoadContactsAction, FinishLoadContactsAction } from './contacts';\r\nimport { ContactsKeys } from '../constants';\r\n\r\nexport const sagaActions = [\r\n  function* loadContacts() {\r\n    let contacts: Contacts = {};\r\n    try {\r\n      yield put<StartLoadContactsAction>({ type: 'START_LOAD_CONTACTS' });\r\n      const keysString: string = yield call([localStorage, localStorage.getItem], ContactsKeys);\r\n      const keys: string[] = JSON.parse(keysString);\r\n      if (Array.isArray(keys))\r\n        for (let key of keys)\r\n          try {\r\n            const contactString: string = yield call([localStorage, localStorage.getItem], key);\r\n            const contact: Contact = JSON.parse (contactString);\r\n            contacts[key] = contact;\r\n          } catch { }  // In case of any error with particular contact - ignore it\r\n    }\r\n    catch {}\r\n    finally {\r\n      // In case of error - return empty list.\r\n      // In case of success - contacts will hold correct items.\r\n      yield put<FinishLoadContactsAction>({ type: 'FINISH_LOAD_CONTACTS', contacts });\r\n    }\r\n  },\r\n]","import { all, call } from 'redux-saga/effects'\r\nimport * as Contacts from './contacts';\r\n\r\nimport { sagaActions } from './BackgroundTasks'\r\n\r\nexport interface ApplicationState {\r\n  contacts: Contacts.ContactsState;\r\n}\r\n\r\nexport const reducers = {\r\n  contacts: Contacts.reducer,\r\n}\r\n\r\nexport function* rootSaga() {\r\n  yield all([\r\n    ...Contacts.sagaActions.map(call),\r\n    ...sagaActions.map(call),\r\n  ])\r\n}","import { createSelector } from 'reselect'\r\n\r\nimport { ApplicationState } from './index'\r\nimport { Contacts } from './contacts'\r\n\r\nconst getContacts = (state: ApplicationState) => state.contacts.contacts;\r\nconst getFavoritesSwitch = (state: ApplicationState) => state.contacts.showFavorites;\r\n\r\nexport const makeGetVisibleContacts = () => createSelector(\r\n  [getContacts, getFavoritesSwitch],\r\n  (contacts, showFavorites) =>\r\n    showFavorites ?\r\n      Object.entries(contacts).reduce<Contacts>((r, [contcatId, contact]) => {\r\n        if (contact.isFavorite) r[contcatId] = contact;\r\n        return r;\r\n      }, {}) : contacts\r\n)","import React, { FC } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    border: 0,\r\n    display: 'inline-flex',\r\n    flexDirection: 'column',\r\n    verticalAlign: 'top',\r\n  },\r\n  span: {\r\n    color: 'rgba(0, 0, 0, 0.54)',\r\n    padding: 0,\r\n    fontSize: '1rem',\r\n    fontFamily: \"Roboto, Helvetica, Arial, sans-serif\",\r\n    fontWeight: 400,\r\n    lineHeight: 1,\r\n    letterSpacing: '0.00938em',\r\n    marginTop: '8px',\r\n  },\r\n}));\r\n\r\ninterface TextBoxOwnProps {\r\n  label: string;\r\n  className?: string;\r\n}\r\n\r\nexport const TextBox: FC<TextBoxOwnProps> = ({ label, children, className, ...rest }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={`${classes.root} ${className}`}>\r\n      <InputLabel shrink={true}>{label}</InputLabel>\r\n      <span key='name' className={classes.span} {...rest}>{children}</span>\r\n    </div>\r\n  )\r\n}","// Taken from https://stackoverflow.com/a/201378/7141073\r\nconst emailRegexp = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\r\n\r\nexport function validateEmail(email: string | undefined): boolean {\r\n  return email !== undefined && email.search(emailRegexp) > -1;\r\n}\r\n\r\n/* Very general phone regexp. \r\n *  Phone may start from +\r\n *  Phone may contain any digit, brackets, dash or white space\r\n * This regexp match 10 digit number or local number like 123-567\r\n*/\r\nconst phoneRegexp = /^[+]?[0-9|(|)|\\-| ]+$/;\r\nexport function validatePhone(phone: string | undefined): boolean {\r\n  return !phone || phone.search(phoneRegexp) > -1;\r\n}\r\n\r\n// Name shouldn't be empty\r\nexport function validateName(name: string | undefined): boolean {\r\n  return !!name;\r\n}","import React, { FC, useState, useCallback } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport SaveIcon from '@material-ui/icons/Check'\r\nimport CancelIcon from '@material-ui/icons/Clear'\r\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport { actionCreators } from '../store/contacts';\r\nimport { TextBox } from './TextBox';\r\nimport { validatePhone, validateEmail, validateName } from './ContactFieldValidators';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    boxShadow: '0px 0px 5px #c7c7c7',\r\n    backgroundColor: '#ffffff',\r\n    borderRadius: '5px',\r\n    padding: '5px',\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n  },\r\n  textField: {\r\n    marginRight: theme.spacing(0.5),\r\n    width: '30%',\r\n    [theme.breakpoints.down('xs')]: {\r\n      width: 'unset',\r\n      marginBottom: '15px',\r\n    },\r\n  },\r\n  fieldsSpace: {\r\n    [theme.breakpoints.down('xs')]: {\r\n      flexDirection: 'column',\r\n    },\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    width: '80%',\r\n  },\r\n  buttonsSpace: {\r\n    [theme.breakpoints.down('xs')]: {\r\n      flexDirection: 'column',\r\n      justifyContent: 'unset',\r\n      alignItems: 'flex-end',\r\n    },\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n    width: '20%',\r\n    marginRight: '10px',\r\n  },\r\n}));\r\n\r\ninterface ContactItemOwnProps {\r\n  isFavorite: boolean;\r\n  isNew?: boolean;\r\n  className?: string;\r\n\r\n  contactId: string;\r\n  name: string;\r\n  email: string;\r\n  phone?: string;\r\n\r\n  CreateUpdateContact: typeof actionCreators['CreateUpdateContact'];\r\n  DeleteContact: typeof actionCreators['DeleteContact'];\r\n}\r\n\r\nexport const ContactItem: FC<ContactItemOwnProps> =\r\n  ({ isFavorite, name, email, phone, className, isNew, contactId,\r\n    CreateUpdateContact, DeleteContact }) => {\r\n    const classes = useStyles();\r\n\r\n    const [edit, setEdit] = useState<boolean>(!!isNew);\r\n\r\n    const [stateName, setName] = useState<string | undefined>(name);\r\n    const [stateEmail, setEmail] = useState<string | undefined>(email);\r\n    const [statePhone, setPhone] = useState<string | undefined>(phone);\r\n\r\n    const isNameValid = validateName(stateName);\r\n    const isEmailValid = validateEmail(stateEmail);\r\n    const isPhoneValid = validatePhone(statePhone);\r\n\r\n    const editOnClick = useCallback(\r\n      () => {\r\n        setEdit(p => !p);\r\n        if (stateName && stateEmail && edit) {\r\n          CreateUpdateContact(contactId, { name: stateName, email: stateEmail, phone: statePhone, isFavorite });\r\n        }\r\n      },\r\n      [contactId, edit, setEdit, CreateUpdateContact, stateName, stateEmail, statePhone, isFavorite]);\r\n\r\n    const cancelOnClick = useCallback(\r\n      () => { isNew ? DeleteContact(contactId) : setEdit(false) },\r\n      [setEdit, DeleteContact, isNew, contactId])\r\n\r\n    const textFiledOnChange = useCallback(\r\n      ({ target: { id, value } }: React.ChangeEvent<{ id: string; value: string }>) => {\r\n        if (id === 'name-edit') setName(value);\r\n        else if (id === 'email-edit') setEmail(value);\r\n        else if (id === 'phone-edit') setPhone(value);\r\n      }, [setName]);\r\n\r\n    const deleteOnClick = useCallback(\r\n      () => DeleteContact(contactId),\r\n      [DeleteContact, contactId]\r\n    );\r\n\r\n    const toggleFavorites = useCallback(\r\n      () => { CreateUpdateContact(contactId, { name, email, phone, isFavorite: !isFavorite }) }\r\n      , [CreateUpdateContact, name, email, phone, isFavorite, contactId]);\r\n\r\n    return (\r\n      <form className={`${classes.root} ${className}`} noValidate autoComplete=\"off\" data-cy='contact-form'>\r\n        <div className={classes.fieldsSpace}>\r\n          {edit ?\r\n            <>\r\n              <TextField multiline error={!isNameValid} onChange={textFiledOnChange} key='name-edit' id='name-edit' data-cy='name-edit' className={classes.textField} label=\"Name\" value={stateName} />\r\n              <TextField error={!isEmailValid} onChange={textFiledOnChange} key='email-edit' id='email-edit' data-cy='email-edit' className={classes.textField} label=\"Email\" value={stateEmail} />\r\n              <TextField error={!isPhoneValid} onChange={textFiledOnChange} key='phone-edit' id='phone-edit' data-cy='phone-edit' className={classes.textField} label=\"Phone\" value={statePhone ? statePhone : ''} />\r\n            </>\r\n            :\r\n            <>\r\n              <TextBox className={classes.textField} key='name' label='Name' data-cy='name'>{name}</TextBox>\r\n              <TextBox className={classes.textField} key='email' label='Email' data-cy='email'>{email}</TextBox>\r\n              <TextBox className={classes.textField} key='phone' label='Phone' data-cy='phone'>{phone}</TextBox>\r\n            </>\r\n          }\r\n        </div>\r\n        <div className={classes.buttonsSpace}>\r\n          <IconButton disabled={edit && !(isNameValid && isEmailValid && isPhoneValid)} edge=\"end\" aria-label=\"edit-save\" data-cy=\"edit-save\" onClick={editOnClick}>\r\n            {edit ? <SaveIcon /> : <EditIcon />}\r\n          </IconButton>\r\n          {edit && <IconButton edge=\"end\" aria-label=\"cancel\" data-cy=\"cancel\" onClick={cancelOnClick}>\r\n            <CancelIcon />\r\n          </IconButton>}\r\n          <IconButton edge=\"end\" aria-label=\"delete\" data-cy=\"delete\" onClick={deleteOnClick}>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n          {!edit && <IconButton edge=\"end\" aria-label=\"favorite\" data-cy=\"favorite\" onClick={toggleFavorites}>\r\n            {isFavorite ? <StarIcon /> : <StarBorderIcon />}\r\n          </IconButton>}\r\n        </div>\r\n      </form>\r\n    )\r\n  }","import React, { FC } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Contacts, Contact, actionCreators } from '../store/contacts'\r\nimport { ContactItem } from './ContactItem'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  contactItem: {\r\n    marginBottom: theme.spacing(1),\r\n  }\r\n}));\r\n\r\ninterface ContactsListOwnProps {\r\n  contacts: Contacts;\r\n  newContact?: Contact;\r\n  newContactId?: string;\r\n\r\n  CreateUpdateContact: typeof actionCreators['CreateUpdateContact'];\r\n  DeleteContact: typeof actionCreators['DeleteContact'];\r\n}\r\n\r\nexport const ContactsList: FC<ContactsListOwnProps> =\r\n  ({ contacts, newContact, newContactId,\r\n    CreateUpdateContact, DeleteContact }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n      <>\r\n        {newContactId && newContact &&\r\n          <ContactItem\r\n            key={newContactId}\r\n            className={classes.contactItem}\r\n            isNew\r\n            contactId={newContactId}\r\n            {...newContact}\r\n            CreateUpdateContact={CreateUpdateContact}\r\n            DeleteContact={DeleteContact}\r\n          />}\r\n        {Object.entries(contacts).map(([id, contact]) =>\r\n          <ContactItem\r\n            key={id}\r\n            contactId={id}\r\n            className={classes.contactItem}\r\n            CreateUpdateContact={CreateUpdateContact}\r\n            DeleteContact={DeleteContact}\r\n            {...contact} />)\r\n        }\r\n      </>\r\n    )\r\n  };","import React, { FC, useRef, useCallback } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { makeGetVisibleContacts } from '../store/contactsSelector';\r\n\r\nimport { ContactsList } from './ContactsList'\r\nimport { ContactsState, actionCreators } from '../store/contacts';\r\nimport { ApplicationState } from '../store';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    position: 'absolute',\r\n\r\n    top: 0,\r\n    left: 0,\r\n    width: '100%',\r\n    height: '100%',\r\n    boxSizing: 'border-box',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    overflow: 'hidden',\r\n  },\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    padding: '10px',\r\n    width: '80rem',\r\n    overflowY: 'auto',\r\n  },\r\n  toolBar: {\r\n    position: 'sticky',\r\n    padding: '5px',\r\n    borderRadius: '5px',\r\n    top: 0,\r\n    zIndex: 100,\r\n    backgroundColor: theme.palette.background.default,\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  addButton: {\r\n    position: 'absolute',\r\n    alignSelf: 'flex-end',\r\n    bottom: '20px',\r\n  }\r\n}));\r\n\r\ntype ContactsLayoutStateProps = ContactsState;\r\n\r\ntype ContactsLayoutDispatchProps = typeof actionCreators;\r\n\r\ntype ContactsLayoutProps = ContactsLayoutStateProps & ContactsLayoutDispatchProps\r\n\r\nexport const ContactsLayout: FC<ContactsLayoutProps> = \r\n  ({ contacts, showFavorites, isLoading, newContact, newContactId,\r\n    ToggleShowFavorites, AddContact, CreateUpdateContact, DeleteContact }) => {\r\n  \r\n      const classes = useStyles();\r\n      const containerRef = useRef<HTMLDivElement>(null);\r\n      const addButtonOnClick = useCallback(() => {\r\n        AddContact();\r\n        containerRef.current && containerRef.current.scrollTo({top: 0, left: 0, behavior: 'smooth'});\r\n      }, [AddContact, containerRef]);\r\n      return (\r\n        <div className={classes.root}>\r\n          <div ref={containerRef} className={classes.container}>\r\n            <div className={classes.toolBar}>\r\n              <FormControlLabel\r\n                data-cy='show-favorites-switch'\r\n                control={<Switch checked={showFavorites} onClick={ToggleShowFavorites}/>}\r\n                label=\"Show favorite contacts\"\r\n              />\r\n            </div>\r\n            <ContactsList \r\n              contacts={contacts} \r\n              newContact={newContact} \r\n              newContactId={newContactId}\r\n              CreateUpdateContact={CreateUpdateContact}\r\n              DeleteContact={DeleteContact}\r\n            />\r\n            <Fab className={classes.addButton} color=\"primary\" aria-label=\"add\" data-cy=\"add\" onClick={addButtonOnClick}>\r\n              <AddIcon />\r\n            </Fab>\r\n          </div>\r\n        </div>\r\n      )\r\n}\r\n\r\nexport default connect<\r\n  ContactsLayoutStateProps, \r\n  ContactsLayoutDispatchProps, \r\n  {}, \r\n  ApplicationState>(\r\n    () => {\r\n      const getVisibleContacts = makeGetVisibleContacts();\r\n      const mapStateToPropsFactory = (state: ApplicationState) => ({\r\n          ...state.contacts,       \r\n          contacts: getVisibleContacts(state),\r\n        })\r\n      return mapStateToPropsFactory;\r\n      },\r\n    actionCreators\r\n  )(ContactsLayout);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './ConfigureStore';\nimport ContactsLayout from './Contacts/ContactsLayout';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <ContactsLayout />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { ApplicationState, reducers, rootSaga } from './store';\r\n\r\nexport default function configureStore() {\r\n\tconst sagaMiddleware = createSagaMiddleware();\r\n\tlet mw = applyMiddleware(sagaMiddleware);\r\n\r\n\tconst allReducers = combineReducers<ApplicationState>({ ...reducers });\r\n\tlet store = createStore(allReducers, mw);\r\n\tsagaMiddleware.run(rootSaga);\r\n\r\n\treturn store;\r\n}"],"sourceRoot":""}